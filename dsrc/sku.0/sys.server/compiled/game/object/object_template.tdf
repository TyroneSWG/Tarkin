id SWOO
templatename    .*
serverpath	..\..\..\..\..\..\src\engine\server\library\serverGame\src\shared\objectTemplate
compilerpath	..\..\..\..\..\..\src\engine\shared\library\sharedTemplate\src\shared\template

version 0

enum Attributes
{
	AT_health
	AT_strength
	AT_constitution
	AT_action
	AT_quickness
	AT_stamina
	AT_mind
	AT_focus
	AT_willpower
}

enum MentalStates
{
	MS_fear
	MS_anger
	MS_interest
	// MS_contempt
	// MS_disgust
	MS_distress
	// MS_joy
	// MS_shame
	// MS_surprise
}

enum UpdateRanges
{
	UR_near
	UR_normal
	UR_far
}

enum MoveFlags
{
	MF_gm
	MF_player
}

enum VisibleFlags
{
	VF_gm
	VF_player
}

enum DeleteFlags
{
	DF_gm
	DF_player
}

enum CraftingType
{
	CT_weapon
	CT_armor
	CT_food
	CT_clothing
	CT_vehicle
	CT_droid
	CT_chemical
	CT_plantBreeding
	CT_animalBreeding
	CT_furniture
	CT_installation
	CT_lightsaber
	CT_genericItem
}

enum XpTypes
{
	XP_rangedCombat
	XP_meleeCombat
	XP_tamingNoTime
	XP_tamingShortTime
	XP_tamingMediumTime
	XP_tamingLargeTime
	XP_architect
	XP_botany
	XP_bountyHunter
	XP_chemist
	XP_dancing
	XP_facilityManagementSavings
	XP_facilityManagementWearAndTear
	XP_farmer
	XP_squadLeaderNoTime
	XP_squadLeaderSmallTime
	XP_squadLeaderMediumTime
	XP_squadLeaderLargeTime
	XP_hairdressing
	XP_holonetSlicingPopularity
	XP_holonetSlicingQuantity
	XP_investigation
	XP_medic
	XP_military
	XP_mining
	XP_miningSavings
	XP_musician
	XP_musicanPopularity
	XP_politics
	XP_slicing
	XP_smuggling
	XP_surveyingNoMinimum
	XP_surveyingLowMinimum
	XP_surveyingMediumMinimum
	XP_surveyingHighMinimum
	XP_survivalHealing
	XP_survivalTracking
	XP_tailoring
	XP_vehicularControl
	XP_vehicularWearAndTear
	XP_cooking
	XP_weaponCrafting
	XP_armorCrafting
	XP_vehicleCrafting
	XP_facilityCrafting
	XP_droidCrafting
}

struct AttribMod
{
	id ATTS
	enumAttributes target      server        //which attribute is affected
	int            value       server        //max strength of the modifier
	float          time        server        //how long it takes for the modifier to reach full strength (in secs)
	float          timeAtValue server        //how long the modifier remains at full strength (in secs)
	float          decay       server        //how long it takes for the modifier to go from full strength to 0 (in secs)
}

struct MentalStateMod
{
	id MESM
	enumMentalStates target    server       //which mental state is affected
	float          value       server       //max strength of the modifier
	float          time        server       //how long it takes for the modifier to reach full strength (in secs)
	float          timeAtValue server       //how long the modifier remains at full strength (in secs)
	float          decay       server       //how long it takes for the modifier to go from full strength to 0 (in secs)
}

struct Contents
{
	id CONT
	string                              slotName              //slot name, as defined in the object's slotDescriptorFilename
	bool                                equipObject           //flag to put the contents in the slot, as opposed to adding it to the container in the slot
	templatetangible_object_template    content               //the object to add
}

struct Xp
{
	id EXPS
	enumXpTypes       type           //type of experience earned
	int               level          //difficulty level, 0 for leveless xp types
	int               value          //amount of experience earned
}


                          filename                 sharedTemplate         //template the client should associate with this template
list                      string                   scripts                //scripts attached to the object
                          objvar                   objvars                //default objvars added to the object
                          int                      volume                 //how much room does the object take up
list                      enumVisibleFlags         visibleFlags           //who can see this object
list                      enumDeleteFlags          deleteFlags            //who can delete this object
list                      enumMoveFlags            moveFlags              //who can move this object
                          bool                     invulnerable           //can this object not be destroyed/killed
                          float                    scale                  //modification to object's size
                          bool                     decay                  //does this object decay
                          float                    maxDecayPoints         //how decayed this object can become (?)
                          float                    currentDecayPoints     //how decayed this object is
                          float                    complexity             //how hard this item is to craft (?)
                          int                      tintIndex              //index into client tint palette
list enumListUpdateRanges float                    updateRanges           //distances for network updates
list                      structContents           contents               //what's in this object
list                      structXp                 xpPoints               //experience points for interacting with this object

version 1

enum Attributes
{
	AT_health
	AT_strength
	AT_constitution
	AT_action
	AT_quickness
	AT_stamina
	AT_mind
	AT_focus
	AT_willpower
}

enum MentalStates
{
	MS_fear
	MS_anger
	MS_interest
	// MS_contempt
	// MS_disgust
	MS_distress
	// MS_joy
	// MS_shame
	// MS_surprise
}

enum UpdateRanges
{
	UR_near
	UR_normal
	UR_far
}

enum MoveFlags
{
	MF_gm
	MF_player
}

enum VisibleFlags
{
	VF_gm
	VF_player
}

enum DeleteFlags
{
	DF_gm
	DF_player
}

enum CraftingType
{
	CT_weapon
	CT_armor
	CT_food
	CT_clothing
	CT_vehicle
	CT_droid
	CT_chemical
	CT_plantBreeding
	CT_animalBreeding
	CT_furniture
	CT_installation
	CT_lightsaber
}

enum XpTypes
{
	XP_rangedCombat
	XP_meleeCombat
	XP_tamingNoTime
	XP_tamingShortTime
	XP_tamingMediumTime
	XP_tamingLargeTime
	XP_architect
	XP_botany
	XP_bountyHunter
	XP_chemist
	XP_dancing
	XP_facilityManagementSavings
	XP_facilityManagementWearAndTear
	XP_farmer
	XP_squadLeaderNoTime
	XP_squadLeaderSmallTime
	XP_squadLeaderMediumTime
	XP_squadLeaderLargeTime
	XP_hairdressing
	XP_holonetSlicingPopularity
	XP_holonetSlicingQuantity
	XP_investigation
	XP_medic
	XP_military
	XP_mining
	XP_miningSavings
	XP_musician
	XP_musicanPopularity
	XP_politics
	XP_slicing
	XP_smuggling
	XP_surveyingNoMinimum
	XP_surveyingLowMinimum
	XP_surveyingMediumMinimum
	XP_surveyingHighMinimum
	XP_survivalHealing
	XP_survivalTracking
	XP_tailoring
	XP_vehicularControl
	XP_vehicularWearAndTear
	XP_cooking
	XP_weaponCrafting
	XP_armorCrafting
	XP_vehicleCrafting
	XP_facilityCrafting
	XP_droidCrafting
}

struct AttribMod
{
	id ATTS
	enumAttributes target      server        //which attribute is affected
	int            value       server        //max strength of the modifier
	float          time        server        //how long it takes for the modifier to reach full strength (in secs)
	float          timeAtValue server        //how long the modifier remains at full strength (in secs)
	float          decay       server        //how long it takes for the modifier to go from full strength to 0 (in secs)
}

struct MentalStateMod
{
	id MESM
	enumMentalStates target    server       //which mental state is affected
	float          value       server       //max strength of the modifier
	float          time        server       //how long it takes for the modifier to reach full strength (in secs)
	float          timeAtValue server       //how long the modifier remains at full strength (in secs)
	float          decay       server       //how long it takes for the modifier to go from full strength to 0 (in secs)
}

struct Contents
{
	id CONT
	string                              slotName              //slot name, as defined in the object's slotDescriptorFilename
	bool                                equipObject           //flag to put the contents in the slot, as opposed to adding it to the container in the slot
	templatetangible_object_template    content               //the object to add
}

struct Xp
{
	id EXPS
	enumXpTypes       type           //type of experience earned
	int               level          //difficulty level, 0 for leveless xp types
	int               value          //amount of experience earned
}


                          filename                 sharedTemplate         //template the client should associate with this template
list                      string                   scripts                //scripts attached to the object
                          objvar                   objvars                //default objvars added to the object
                          int                      volume                 //how much room does the object take up
list                      enumVisibleFlags         visibleFlags           //who can see this object
list                      enumDeleteFlags          deleteFlags            //who can delete this object
list                      enumMoveFlags            moveFlags              //who can move this object
                          bool                     invulnerable           //can this object not be destroyed/killed
                          bool                     decay                  //does this object decay
                          float                    maxDecayPoints         //how decayed this object can become (?)
                          float                    currentDecayPoints     //how decayed this object is
                          float                    complexity             //how hard this item is to craft (?)
                          int                      tintIndex              //index into client tint palette
list enumListUpdateRanges float                    updateRanges           //distances for network updates
list                      structContents           contents               //what's in this object
list                      structXp                 xpPoints               //experience points for interacting with this object


version 2

enum Attributes
{
	AT_health
	AT_strength
	AT_constitution
	AT_action
	AT_quickness
	AT_stamina
	AT_mind
	AT_focus
	AT_willpower
}

enum MentalStates
{
	MS_fear
	MS_anger
	MS_interest
	// MS_contempt
	// MS_disgust
	MS_distress
	// MS_joy
	// MS_shame
	// MS_surprise
}

enum UpdateRanges
{
	UR_near
	UR_normal
	UR_far
}

enum MoveFlags
{
	MF_gm
	MF_player
}

enum VisibleFlags
{
	VF_gm
	VF_player
}

enum DeleteFlags
{
	DF_gm
	DF_player
}

enum CraftingType
{
	CT_weapon
	CT_armor
	CT_food
	CT_clothing
	CT_vehicle
	CT_droid
	CT_chemical
	CT_plantBreeding
	CT_animalBreeding
	CT_furniture
	CT_installation
	CT_lightsaber
}

enum XpTypes
{
	XP_rangedCombat
	XP_meleeCombat
	XP_tamingNoTime
	XP_tamingShortTime
	XP_tamingMediumTime
	XP_tamingLargeTime
	XP_architect
	XP_botany
	XP_bountyHunter
	XP_chemist
	XP_dancing
	XP_facilityManagementSavings
	XP_facilityManagementWearAndTear
	XP_farmer
	XP_squadLeaderNoTime
	XP_squadLeaderSmallTime
	XP_squadLeaderMediumTime
	XP_squadLeaderLargeTime
	XP_hairdressing
	XP_holonetSlicingPopularity
	XP_holonetSlicingQuantity
	XP_investigation
	XP_medic
	XP_military
	XP_mining
	XP_miningSavings
	XP_musician
	XP_musicanPopularity
	XP_politics
	XP_slicing
	XP_smuggling
	XP_surveyingNoMinimum
	XP_surveyingLowMinimum
	XP_surveyingMediumMinimum
	XP_surveyingHighMinimum
	XP_survivalHealing
	XP_survivalTracking
	XP_tailoring
	XP_vehicularControl
	XP_vehicularWearAndTear
	XP_cooking
	XP_weaponCrafting
	XP_armorCrafting
	XP_vehicleCrafting
	XP_facilityCrafting
	XP_droidCrafting
}

struct AttribMod
{
	id ATTS
	enumAttributes target      server        //which attribute is affected
	int            value       server        //max strength of the modifier
	float          time        server        //how long it takes for the modifier to reach full strength (in secs)
	float          timeAtValue server        //how long the modifier remains at full strength (in secs)
	float          decay       server        //how long it takes for the modifier to go from full strength to 0 (in secs)
}

struct MentalStateMod
{
	id MESM
	enumMentalStates target    server       //which mental state is affected
	float          value       server       //max strength of the modifier
	float          time        server       //how long it takes for the modifier to reach full strength (in secs)
	float          timeAtValue server       //how long the modifier remains at full strength (in secs)
	float          decay       server       //how long it takes for the modifier to go from full strength to 0 (in secs)
}

struct Contents
{
	id CONT
	string                              slotName              //slot name, as defined in the object's slotDescriptorFilename
	bool                                equipObject           //flag to put the contents in the slot, as opposed to adding it to the container in the slot
	templatetangible_object_template    content               //the object to add
}

struct Xp
{
	id EXPS
	enumXpTypes       type           //type of experience earned
	int               level          //difficulty level, 0 for leveless xp types
	int               value          //amount of experience earned
}


                          filename                 sharedTemplate         //template the client should associate with this template
list                      string                   scripts                //scripts attached to the object
                          objvar                   objvars                //default objvars added to the object
                          int                      volume                 //how much room does the object take up
list                      enumVisibleFlags         visibleFlags           //who can see this object
list                      enumDeleteFlags          deleteFlags            //who can delete this object
list                      enumMoveFlags            moveFlags              //who can move this object
                          bool                     invulnerable           //can this object not be destroyed/killed
                          bool                     decay                  //does this object decay
                          float                    maxDecayPoints         //how decayed this object can become (?)
                          float                    currentDecayPoints     //how decayed this object is
                          float                    complexity             //how hard this item is to craft (?)
                          int                      tintIndex              //index into client tint palette
list enumListUpdateRanges float                    updateRanges           //distances for network updates
list                      structContents           contents               //what's in this object
list                      structXp                 xpPoints               //experience points for interacting with this object
								  bool                     persistByDefault       //flag to automatically persist this object on creation



version 3

enum Attributes
{
	AT_health
	AT_strength
	AT_constitution
	AT_action
	AT_quickness
	AT_stamina
	AT_mind
	AT_focus
	AT_willpower
}

enum MentalStates
{
	MS_fear
	MS_anger
	MS_interest
	// MS_contempt
	// MS_disgust
	MS_distress
	// MS_joy
	// MS_shame
	// MS_surprise
}

enum UpdateRanges
{
	UR_near
	UR_normal
	UR_far
}

enum MoveFlags
{
	MF_gm
	MF_player
}

enum VisibleFlags
{
	VF_gm
	VF_player
}

enum DeleteFlags
{
	DF_gm
	DF_player
}

// crafting types also defined in base_class.java
enum CraftingType
{
	CT_weapon           = 0x00000001
	CT_armor            = 0x00000002
	CT_food             = 0x00000004
	CT_clothing         = 0x00000008
	CT_vehicle          = 0x00000010
	CT_droid            = 0x00000020
	CT_chemical         = 0x00000040
	CT_plantBreeding    = 0x00000080
	CT_animalBreeding   = 0x00000100
	CT_furniture        = 0x00000200
	CT_installation     = 0x00000400
	CT_lightsaber       = 0x00000800
	CT_genericItem      = 0x00001000
}

enum XpTypes
{
	XP_rangedCombat
	XP_meleeCombat
	XP_tamingNoTime
	XP_tamingShortTime
	XP_tamingMediumTime
	XP_tamingLargeTime
	XP_architect
	XP_botany
	XP_bountyHunter
	XP_chemist
	XP_dancing
	XP_facilityManagementSavings
	XP_facilityManagementWearAndTear
	XP_farmer
	XP_squadLeaderNoTime
	XP_squadLeaderSmallTime
	XP_squadLeaderMediumTime
	XP_squadLeaderLargeTime
	XP_hairdressing
	XP_holonetSlicingPopularity
	XP_holonetSlicingQuantity
	XP_investigation
	XP_medic
	XP_military
	XP_mining
	XP_miningSavings
	XP_musician
	XP_musicanPopularity
	XP_politics
	XP_slicing
	XP_smuggling
	XP_surveyingNoMinimum
	XP_surveyingLowMinimum
	XP_surveyingMediumMinimum
	XP_surveyingHighMinimum
	XP_survivalHealing
	XP_survivalTracking
	XP_tailoring
	XP_vehicularControl
	XP_vehicularWearAndTear
	XP_cooking
	XP_weaponCrafting
	XP_armorCrafting
	XP_vehicleCrafting
	XP_facilityCrafting
	XP_droidCrafting
}

struct AttribMod
{
	id ATTS
	enumAttributes target      server        //which attribute is affected
	int            value       server        //max strength of the modifier
	float          time        server        //how long it takes for the modifier to reach full strength (in secs)
	float          timeAtValue server        //how long the modifier remains at full strength (in secs)
	float          decay       server        //how long it takes for the modifier to go from full strength to 0 (in secs)
}

struct MentalStateMod
{
	id MESM
	enumMentalStates target    server       //which mental state is affected
	float          value       server       //max strength of the modifier
	float          time        server       //how long it takes for the modifier to reach full strength (in secs)
	float          timeAtValue server       //how long the modifier remains at full strength (in secs)
	float          decay       server       //how long it takes for the modifier to go from full strength to 0 (in secs)
}

struct Contents
{
	id CONT
	string                              slotName              //slot name, as defined in the object's slotDescriptorFilename
	bool                                equipObject           //flag to put the contents in the slot, as opposed to adding it to the container in the slot
	templatetangible_object_template    content               //the object to add
}

struct Xp
{
	id EXPS
	enumXpTypes       type           //type of experience earned
	int               level          //difficulty level, 0 for leveless xp types
	int               value          //amount of experience earned
}


                          filename                 sharedTemplate         //template the client should associate with this template
list                      string                   scripts                //scripts attached to the object
                          objvar                   objvars                //default objvars added to the object
                          int                      volume                 //how much room does the object take up
list                      enumVisibleFlags         visibleFlags           //who can see this object
list                      enumDeleteFlags          deleteFlags            //who can delete this object
list                      enumMoveFlags            moveFlags              //who can move this object
                          bool                     invulnerable           //can this object not be destroyed/killed
                          bool                     decay                  //does this object decay
                          float                    maxDecayPoints         //how decayed this object can become (?)
                          float                    currentDecayPoints     //how decayed this object is
                          float                    complexity             //how hard this item is to craft (?)
                          int                      tintIndex              //index into client tint palette
list enumListUpdateRanges float                    updateRanges           //distances for network updates
list                      structContents           contents               //what's in this object
list                      structXp                 xpPoints               //experience points for interacting with this object
								  bool                     persistByDefault       //flag to automatically persist this object on creation



version 4

enum Attributes
{
	AT_health
	AT_strength
	AT_constitution
	AT_action
	AT_quickness
	AT_stamina
	AT_mind
	AT_focus
	AT_willpower
}

enum MentalStates
{
	MS_fear
	MS_anger
	MS_interest
	// MS_contempt
	// MS_disgust
	MS_distress
	// MS_joy
	// MS_shame
	// MS_surprise
}

enum UpdateRanges
{
	UR_near
	UR_normal
	UR_far
}

enum MoveFlags
{
	MF_gm
	MF_player
}

enum VisibleFlags
{
	VF_gm
	VF_player
}

enum DeleteFlags
{
	DF_gm
	DF_player
}

// crafting types also defined in base_class.java
enum CraftingType
{
	CT_weapon           = 0x00000001
	CT_armor            = 0x00000002
	CT_food             = 0x00000004
	CT_clothing         = 0x00000008
	CT_vehicle          = 0x00000010
	CT_droid            = 0x00000020
	CT_chemical         = 0x00000040
	CT_plantBreeding    = 0x00000080
	CT_animalBreeding   = 0x00000100
	CT_furniture        = 0x00000200
	CT_installation     = 0x00000400
	CT_lightsaber       = 0x00000800
	CT_genericItem      = 0x00001000
}

enum XpTypes
{
	XP_rangedCombat
	XP_meleeCombat
	XP_tamingNoTime
	XP_tamingShortTime
	XP_tamingMediumTime
	XP_tamingLargeTime
	XP_architect
	XP_botany
	XP_bountyHunter
	XP_chemist
	XP_dancing
	XP_facilityManagementSavings
	XP_facilityManagementWearAndTear
	XP_farmer
	XP_squadLeaderNoTime
	XP_squadLeaderSmallTime
	XP_squadLeaderMediumTime
	XP_squadLeaderLargeTime
	XP_hairdressing
	XP_holonetSlicingPopularity
	XP_holonetSlicingQuantity
	XP_investigation
	XP_medic
	XP_military
	XP_mining
	XP_miningSavings
	XP_musician
	XP_musicanPopularity
	XP_politics
	XP_slicing
	XP_smuggling
	XP_surveyingNoMinimum
	XP_surveyingLowMinimum
	XP_surveyingMediumMinimum
	XP_surveyingHighMinimum
	XP_survivalHealing
	XP_survivalTracking
	XP_tailoring
	XP_vehicularControl
	XP_vehicularWearAndTear
	XP_cooking
	XP_weaponCrafting
	XP_armorCrafting
	XP_vehicleCrafting
	XP_facilityCrafting
	XP_droidCrafting
}

enum ArmorRating
{
	AR_armorNone
	AR_armorLight
	AR_armorMedium
	AR_armorHeavy
}

enum DamageType
{
	DT_kinetic
	DT_energy
	DT_blast
	DT_stun
	DT_restraint
	DT_elemental           for weapon-type attacks, i.e. heat from flamethrower
	DT_environmental       for constant weather attacks, i.e. cold on Hoth
	DT_ammo		   the ammo for the weapon determines the damage
}

enum ElementalDamageType
{
	EDT_heat
	EDT_cold
	EDT_acid
	EDT_electrical
}

struct AttribMod
{
	id ATTS
	enumAttributes target      server        //which attribute is affected
	int            value       server        //max strength of the modifier
	float          time        server        //how long it takes for the modifier to reach full strength (in secs)
	float          timeAtValue server        //how long the modifier remains at full strength (in secs)
	float          decay       server        //how long it takes for the modifier to go from full strength to 0 (in secs)
}

struct MentalStateMod
{
	id MESM
	enumMentalStates target    server       //which mental state is affected
	float          value       server       //max strength of the modifier
	float          time        server       //how long it takes for the modifier to reach full strength (in secs)
	float          timeAtValue server       //how long the modifier remains at full strength (in secs)
	float          decay       server       //how long it takes for the modifier to go from full strength to 0 (in secs)
}

struct Contents
{
	id CONT
	string                              slotName              //slot name, as defined in the object's slotDescriptorFilename
	bool                                equipObject           //flag to put the contents in the slot, as opposed to adding it to the container in the slot
	templatetangible_object_template    content               //the object to add
}

struct Xp
{
	id EXPS
	enumXpTypes       type           //type of experience earned
	int               level          //difficulty level, 0 for leveless xp types
	int               value          //amount of experience earned
}


                          filename                 sharedTemplate         //template the client should associate with this template
list                      string                   scripts                //scripts attached to the object
                          objvar                   objvars                //default objvars added to the object
                          int                      volume                 //how much room does the object take up
list                      enumVisibleFlags         visibleFlags           //who can see this object
list                      enumDeleteFlags          deleteFlags            //who can delete this object
list                      enumMoveFlags            moveFlags              //who can move this object
                          bool                     invulnerable           //can this object not be destroyed/killed
                          bool                     decay                  //does this object decay
                          float                    maxDecayPoints         //how decayed this object can become (?)
                          float                    currentDecayPoints     //how decayed this object is
                          float                    complexity             //how hard this item is to craft (?)
                          int                      tintIndex              //index into client tint palette
list enumListUpdateRanges float                    updateRanges           //distances for network updates
list                      structContents           contents               //what's in this object
list                      structXp                 xpPoints               //experience points for interacting with this object
								  bool                     persistByDefault       //flag to automatically persist this object on creation


version 5

enum Attributes
{
	AT_health
	AT_strength
	AT_constitution
	AT_action
	AT_quickness
	AT_stamina
	AT_mind
	AT_focus
	AT_willpower
}

enum MentalStates
{
	MS_fear
	MS_anger
	MS_interest
	// MS_contempt
	// MS_disgust
	MS_distress
	// MS_joy
	// MS_shame
	// MS_surprise
}

enum UpdateRanges
{
	UR_near
	UR_normal
	UR_far
}

enum MoveFlags
{
	MF_gm
	MF_player
}

enum VisibleFlags
{
	VF_gm
	VF_player
}

enum DeleteFlags
{
	DF_gm
	DF_player
}

// crafting types also defined in base_class.java
enum CraftingType
{
	CT_weapon           = 0x00000001
	CT_armor            = 0x00000002
	CT_food             = 0x00000004
	CT_clothing         = 0x00000008
	CT_vehicle          = 0x00000010
	CT_droid            = 0x00000020
	CT_chemical         = 0x00000040
	CT_plantBreeding    = 0x00000080
	CT_animalBreeding   = 0x00000100
	CT_furniture        = 0x00000200
	CT_installation     = 0x00000400
	CT_lightsaber       = 0x00000800
	CT_genericItem      = 0x00001000
}

enum XpTypes
{
	XP_rangedCombat
	XP_meleeCombat
	XP_tamingNoTime
	XP_tamingShortTime
	XP_tamingMediumTime
	XP_tamingLargeTime
	XP_architect
	XP_botany
	XP_bountyHunter
	XP_chemist
	XP_dancing
	XP_facilityManagementSavings
	XP_facilityManagementWearAndTear
	XP_squadLeaderNoTime
	XP_squadLeaderSmallTime
	XP_squadLeaderMediumTime
	XP_squadLeaderLargeTime
	XP_hairdressing
	XP_holonetSlicingPopularity
	XP_holonetSlicingQuantity
	XP_investigation
	XP_medic
	XP_military
	XP_mining
	XP_miningSavings
	XP_musician
	XP_musicanPopularity
	XP_politics
	XP_slicing
	XP_smuggling
	XP_surveyingNoMinimum
	XP_surveyingLowMinimum
	XP_surveyingMediumMinimum
	XP_surveyingHighMinimum
	XP_survivalHealing
	XP_survivalTracking
	XP_vehicularControl
	XP_vehicularWearAndTear
	XP_resourceHarvestingOrganic
	XP_resourceHarvestingInorganic
	XP_crafting
	XP_craftingClothing
	XP_craftingClothingArmor
	XP_craftingDroid
	XP_craftingFood
	XP_craftingMedicine
	XP_craftingStructure
	XP_craftingWeapons
	XP_craftingWeaponsMelee
	XP_craftingWeaponsRanged
	XP_craftingWeaponsMunition
	XP_industrialist
}

enum ArmorRating
{
	AR_armorNone
	AR_armorLight
	AR_armorMedium
	AR_armorHeavy
}

enum DamageType
{
	DT_kinetic
	DT_energy
	DT_blast
	DT_stun
	DT_restraint
	DT_elemental           for weapon-type attacks, i.e. heat from flamethrower
	DT_environmental       for constant weather attacks, i.e. cold on Hoth
	DT_ammo		   the ammo for the weapon determines the damage
}

enum ElementalDamageType
{
	EDT_heat
	EDT_cold
	EDT_acid
	EDT_electrical
}

struct AttribMod
{
	id ATTS
	enumAttributes target      server        //which attribute is affected
	int            value       server        //max strength of the modifier
	float          time        server        //how long it takes for the modifier to reach full strength (in secs)
	float          timeAtValue server        //how long the modifier remains at full strength (in secs)
	float          decay       server        //how long it takes for the modifier to go from full strength to 0 (in secs)
}

struct MentalStateMod
{
	id MESM
	enumMentalStates target    server       //which mental state is affected
	float          value       server       //max strength of the modifier
	float          time        server       //how long it takes for the modifier to reach full strength (in secs)
	float          timeAtValue server       //how long the modifier remains at full strength (in secs)
	float          decay       server       //how long it takes for the modifier to go from full strength to 0 (in secs)
}

struct Contents
{
	id CONT
	string                              slotName              //slot name, as defined in the object's slotDescriptorFilename
	bool                                equipObject           //flag to put the contents in the slot, as opposed to adding it to the container in the slot
	templateobject_template             content               //the object to add
}

struct Xp
{
	id EXPS
	enumXpTypes       type           //type of experience earned
	int               level          //difficulty level, 0 for leveless xp types
	int               value          //amount of experience earned
}


                          filename                 sharedTemplate         //template the client should associate with this template
list                      string                   scripts                //scripts attached to the object
                          objvar                   objvars                //default objvars added to the object
                          int                      volume                 //how much room does the object take up
list                      enumVisibleFlags         visibleFlags           //who can see this object
list                      enumDeleteFlags          deleteFlags            //who can delete this object
list                      enumMoveFlags            moveFlags              //who can move this object
                          bool                     invulnerable           //can this object not be destroyed/killed
                          float                    decay                  //the object's decay rate (0 = doesn't decay)
                          float                    complexity             //how hard this item is to craft (?)
                          int                      tintIndex              //index into client tint palette
list enumListUpdateRanges float                    updateRanges           //distances for network updates
list                      structContents           contents               //what's in this object
list                      structXp                 xpPoints               //experience points for interacting with this object
								  bool                     persistByDefault       //flag to automatically persist this object on creation


version 6

enum Attributes
{
	AT_health
	AT_strength
	AT_constitution
	AT_action
	AT_quickness
	AT_stamina
	AT_mind
	AT_focus
	AT_willpower
}

enum MentalStates
{
	MS_fear
	MS_anger
	MS_interest
	// MS_contempt
	// MS_disgust
	MS_distress
	// MS_joy
	// MS_shame
	// MS_surprise
}

enum UpdateRanges
{
	UR_near
	UR_normal
	UR_far
}

enum MoveFlags
{
	MF_gm
	MF_player
}

enum VisibleFlags
{
	VF_gm
	VF_player
}

enum DeleteFlags
{
	DF_gm
	DF_player
}

// crafting types also defined in base_class.java
enum CraftingType
{
	CT_weapon           = 0x00000001
	CT_armor            = 0x00000002
	CT_food             = 0x00000004
	CT_clothing         = 0x00000008
	CT_vehicle          = 0x00000010
	CT_droid            = 0x00000020
	CT_chemical         = 0x00000040
	CT_plantBreeding    = 0x00000080
	CT_animalBreeding   = 0x00000100
	CT_furniture        = 0x00000200
	CT_installation     = 0x00000400
	CT_lightsaber       = 0x00000800
	CT_genericItem      = 0x00001000
}

enum XpTypes
{
	XP_rangedCombat
	XP_meleeCombat
	XP_tamingNoTime
	XP_tamingShortTime
	XP_tamingMediumTime
	XP_tamingLargeTime
	XP_architect
	XP_botany
	XP_bountyHunter
	XP_chemist
	XP_dancing
	XP_facilityManagementSavings
	XP_facilityManagementWearAndTear
	XP_squadLeaderNoTime
	XP_squadLeaderSmallTime
	XP_squadLeaderMediumTime
	XP_squadLeaderLargeTime
	XP_hairdressing
	XP_holonetSlicingPopularity
	XP_holonetSlicingQuantity
	XP_investigation
	XP_medic
	XP_military
	XP_mining
	XP_miningSavings
	XP_musician
	XP_musicanPopularity
	XP_politics
	XP_slicing
	XP_smuggling
	XP_surveyingNoMinimum
	XP_surveyingLowMinimum
	XP_surveyingMediumMinimum
	XP_surveyingHighMinimum
	XP_survivalHealing
	XP_survivalTracking
	XP_vehicularControl
	XP_vehicularWearAndTear
	XP_resourceHarvestingOrganic
	XP_resourceHarvestingInorganic
	XP_crafting
	XP_craftingClothing
	XP_craftingClothingArmor
	XP_craftingDroid
	XP_craftingFood
	XP_craftingMedicine
	XP_craftingStructure
	XP_craftingWeapons
	XP_craftingWeaponsMelee
	XP_craftingWeaponsRanged
	XP_craftingWeaponsMunition
	XP_industrialist
}

enum ArmorRating
{
	AR_armorNone
	AR_armorLight
	AR_armorMedium
	AR_armorHeavy
}

enum DamageType
{
	DT_kinetic
	DT_energy
	DT_blast
	DT_stun
	DT_restraint
	DT_elemental           for weapon-type attacks, i.e. heat from flamethrower
	DT_environmental       for constant weather attacks, i.e. cold on Hoth
	DT_ammo		   the ammo for the weapon determines the damage
}

enum ElementalDamageType
{
	EDT_heat
	EDT_cold
	EDT_acid
	EDT_electrical
}

struct AttribMod
{
	id ATTS
	enumAttributes target      server        //which attribute is affected
	int            value       server        //max strength of the modifier
	float          time        server        //how long it takes for the modifier to reach full strength (in secs)
	float          timeAtValue server        //how long the modifier remains at full strength (in secs)
	float          decay       server        //how long it takes for the modifier to go from full strength to 0 (in secs)
}

struct MentalStateMod
{
	id MESM
	enumMentalStates target    server       //which mental state is affected
	float          value       server       //max strength of the modifier
	float          time        server       //how long it takes for the modifier to reach full strength (in secs)
	float          timeAtValue server       //how long the modifier remains at full strength (in secs)
	float          decay       server       //how long it takes for the modifier to go from full strength to 0 (in secs)
}

struct Contents
{
	id CONT
	string                              slotName              //slot name, as defined in the object's slotDescriptorFilename
	bool                                equipObject           //flag to put the contents in the slot, as opposed to adding it to the container in the slot
	templateobject_template             content               //the object to add
}

struct Xp
{
	id EXPS
	enumXpTypes       type           //type of experience earned
	int               level          //difficulty level, 0 for leveless xp types
	int               value          //amount of experience earned
}


                          filename                 sharedTemplate         //template the client should associate with this template
list                      string                   scripts                //scripts attached to the object
                          objvar                   objvars                //default objvars added to the object
                          int                      volume                 //how much room does the object take up
list                      enumVisibleFlags         visibleFlags           //who can see this object
list                      enumDeleteFlags          deleteFlags            //who can delete this object
list                      enumMoveFlags            moveFlags              //who can move this object
                          bool                     invulnerable           //can this object not be destroyed/killed
                          float                    complexity             //how hard this item is to craft (?)
                          int                      tintIndex              //index into client tint palette
list enumListUpdateRanges float                    updateRanges           //distances for network updates
list                      structContents           contents               //what's in this object
list                      structXp                 xpPoints               //experience points for interacting with this object
								  bool                     persistByDefault       //flag to automatically persist this object on creation



version 7

enum Attributes
{
	AT_health
	AT_strength
	AT_constitution
	AT_action
	AT_quickness
	AT_stamina
	AT_mind
	AT_focus
	AT_willpower
}

enum MentalStates
{
	MS_fear
	MS_anger
	MS_interest
	// MS_contempt
	// MS_disgust
	MS_distress
	// MS_joy
	// MS_shame
	// MS_surprise
}

enum UpdateRanges
{
	UR_near
	UR_normal
	UR_far
}

enum MoveFlags
{
	MF_gm
	MF_player
}

enum VisibleFlags
{
	VF_gm
	VF_player
}

enum DeleteFlags
{
	DF_gm
	DF_player
}

// crafting types also defined in base_class.java
enum CraftingType
{
	CT_weapon           = 0x00000001
	CT_armor            = 0x00000002
	CT_food             = 0x00000004
	CT_clothing         = 0x00000008
	CT_vehicle          = 0x00000010
	CT_droid            = 0x00000020
	CT_chemical         = 0x00000040
	CT_plantBreeding    = 0x00000080
	CT_animalBreeding   = 0x00000100
	CT_furniture        = 0x00000200
	CT_installation     = 0x00000400
	CT_lightsaber       = 0x00000800
	CT_genericItem      = 0x00001000
}

enum XpTypes
{
	XP_rangedCombat
	XP_meleeCombat
	XP_tamingNoTime
	XP_tamingShortTime
	XP_tamingMediumTime
	XP_tamingLargeTime
	XP_architect
	XP_botany
	XP_bountyHunter
	XP_chemist
	XP_dancing
	XP_facilityManagementSavings
	XP_facilityManagementWearAndTear
	XP_squadLeaderNoTime
	XP_squadLeaderSmallTime
	XP_squadLeaderMediumTime
	XP_squadLeaderLargeTime
	XP_hairdressing
	XP_holonetSlicingPopularity
	XP_holonetSlicingQuantity
	XP_investigation
	XP_medic
	XP_military
	XP_mining
	XP_miningSavings
	XP_musician
	XP_musicanPopularity
	XP_politics
	XP_slicing
	XP_smuggling
	XP_surveyingNoMinimum
	XP_surveyingLowMinimum
	XP_surveyingMediumMinimum
	XP_surveyingHighMinimum
	XP_survivalHealing
	XP_survivalTracking
	XP_vehicularControl
	XP_vehicularWearAndTear
	XP_resourceHarvestingOrganic
	XP_resourceHarvestingInorganic
	XP_crafting
	XP_craftingClothing
	XP_craftingClothingArmor
	XP_craftingDroid
	XP_craftingFood
	XP_craftingMedicine
	XP_craftingStructure
	XP_craftingWeapons
	XP_craftingWeaponsMelee
	XP_craftingWeaponsRanged
	XP_craftingWeaponsMunition
	XP_industrialist
	XP_craftingScout
}

// ArmorRating, DamageType, and ElementalDamageType are also defined in the shared draft_schematic_object.tdf
enum ArmorRating
{
	AR_armorNone
	AR_armorLight
	AR_armorMedium
	AR_armorHeavy
}

// ArmorRating, DamageType, and ElementalDamageType are also defined in the shared draft_schematic_object.tdf
enum DamageType
{
	DT_kinetic
	DT_energy
	DT_blast
	DT_stun
	DT_restraint
	DT_elemental           for weapon-type attacks, i.e. heat from flamethrower
	DT_environmental       for constant weather attacks, i.e. cold on Hoth
	DT_ammo		   the ammo for the weapon determines the damage
}

// ArmorRating, DamageType, and ElementalDamageType are also defined in the shared draft_schematic_object.tdf
enum ElementalDamageType
{
	EDT_heat
	EDT_cold
	EDT_acid
	EDT_electrical
}

struct AttribMod
{
	id ATTS
	enumAttributes target      server        //which attribute is affected
	int            value       server        //max strength of the modifier
	float          time        server        //how long it takes for the modifier to reach full strength (in secs)
	float          timeAtValue server        //how long the modifier remains at full strength (in secs)
	float          decay       server        //how long it takes for the modifier to go from full strength to 0 (in secs)
}

struct MentalStateMod
{
	id MESM
	enumMentalStates target    server       //which mental state is affected
	float          value       server       //max strength of the modifier
	float          time        server       //how long it takes for the modifier to reach full strength (in secs)
	float          timeAtValue server       //how long the modifier remains at full strength (in secs)
	float          decay       server       //how long it takes for the modifier to go from full strength to 0 (in secs)
}

struct Contents
{
	id CONT
	string                              slotName              //slot name, as defined in the object's slotDescriptorFilename
	bool                                equipObject           //flag to put the contents in the slot, as opposed to adding it to the container in the slot
	templateobject_template             content               //the object to add
}

struct Xp
{
	id EXPS
	enumXpTypes       type           //type of experience earned
	int               level          //difficulty level, 0 for leveless xp types
	int               value          //amount of experience earned
}


                          filename                 sharedTemplate         //template the client should associate with this template
list                      string                   scripts                //scripts attached to the object
                          objvar                   objvars                //default objvars added to the object
                          int                      volume                 //how much room does the object take up
list                      enumVisibleFlags         visibleFlags           //who can see this object
list                      enumDeleteFlags          deleteFlags            //who can delete this object
list                      enumMoveFlags            moveFlags              //who can move this object
                          bool                     invulnerable           //can this object not be destroyed/killed
                          float                    complexity             //how hard this item is to craft (?)
                          int                      tintIndex              //index into client tint palette
list enumListUpdateRanges float                    updateRanges           //distances for network updates
list                      structContents           contents               //what's in this object
list                      structXp                 xpPoints               //experience points for interacting with this object
								  bool                     persistByDefault       //flag to automatically persist this object on creation
								  bool                     persistContents        //flag that this container persists its contents


version 8

enum Attributes
{
	AT_health
	AT_strength
	AT_constitution
	AT_action
	AT_quickness
	AT_stamina
	AT_mind
	AT_focus
	AT_willpower
}

enum MentalStates
{
	MS_fear
	MS_anger
	MS_interest
	// MS_contempt
	// MS_disgust
	MS_distress
	// MS_joy
	// MS_shame
	// MS_surprise
}

enum UpdateRanges
{
	UR_near
	UR_normal
	UR_far
}

enum MoveFlags
{
	MF_gm
	MF_player
}

enum VisibleFlags
{
	VF_gm
	VF_player
}

enum DeleteFlags
{
	DF_gm
	DF_player
}

// crafting types also defined in base_class.java
enum CraftingType
{
	CT_weapon                          = 0x00000001
	CT_armor                           = 0x00000002
	CT_food                            = 0x00000004
	CT_clothing                        = 0x00000008
	CT_vehicle                         = 0x00000010
	CT_droid                           = 0x00000020
	CT_chemical                        = 0x00000040
	CT_plantBreeding                   = 0x00000080
	CT_animalBreeding                  = 0x00000100
	CT_furniture                       = 0x00000200
	CT_installation                    = 0x00000400
	CT_lightsaber                      = 0x00000800
	CT_genericItem                     = 0x00001000
	CT_genetics                        = 0x00002000
	CT_mandalorianTailor               = 0x00004000
	CT_mandalorianArmorsmith           = 0x00008000
	CT_mandalorianDroidEngineer        = 0x00010000
	CT_space                           = 0x00020000
	CT_reverseEngineering              = 0x00040000
	CT_misc                            = 0x00080000
	CT_spaceComponent                  = 0x00100000
	CT_mission                         = 0x80000000
	// the following items are combos to allow a draft schematic template to use them
	CT_weaponMission                   = 0x80000001
	CT_armorMission                    = 0x80000002
	CT_foodMission                     = 0x80000004
	CT_clothingMission                 = 0x80000008
	CT_vehicleMission                  = 0x80000010
	CT_droidMission                    = 0x80000020
	CT_chemicalMission                 = 0x80000040
	CT_plantBreedingMission            = 0x80000080
	CT_animalBreedingMission           = 0x80000100
	CT_furnitureMission                = 0x80000200
	CT_installationMission             = 0x80000400
	CT_lightsaberMission               = 0x80000800
	CT_genericItemMission              = 0x80001000
	CT_geneticsMission                 = 0x80002000
	CT_mandalorianTailorMission        = 0x80004000
	CT_mandalorianArmorsmithMission    = 0x80008000
	CT_mandalorianDroidEngineerMission = 0x80010000
	CT_spaceMission                    = 0x80020000
	CT_reverseEngineeringMission       = 0x80040000
	CT_miscMission                     = 0x80080000
	CT_spaceComponentMission           = 0x80100000
}

// NOTE: when you update this list, make sure to update the registerMe() function in ServerObjectTemplate.cpp
enum XpTypes
{
	XP_rangedCombat
	XP_meleeCombat
	XP_tamingNoTime
	XP_tamingShortTime
	XP_tamingMediumTime
	XP_tamingLargeTime
	XP_architect
	XP_botany
	XP_bountyHunter
	XP_chemist
	XP_dancing
	XP_facilityManagementSavings
	XP_facilityManagementWearAndTear
	XP_squadLeaderNoTime
	XP_squadLeaderSmallTime
	XP_squadLeaderMediumTime
	XP_squadLeaderLargeTime
	XP_hairdressing
	XP_holonetSlicingPopularity
	XP_holonetSlicingQuantity
	XP_investigation
	XP_medic
	XP_military
	XP_mining
	XP_miningSavings
	XP_musician
	XP_musicanPopularity
	XP_politics
	XP_slicing
	XP_smuggling
	XP_surveyingNoMinimum
	XP_surveyingLowMinimum
	XP_surveyingMediumMinimum
	XP_surveyingHighMinimum
	XP_survivalHealing
	XP_survivalTracking
	XP_vehicularControl
	XP_vehicularWearAndTear
	XP_resourceHarvestingOrganic
	XP_resourceHarvestingInorganic
	XP_crafting
	XP_craftingClothing
	XP_craftingClothingArmor
	XP_craftingDroid
	XP_craftingFood
	XP_craftingMedicine
	XP_craftingStructure
	XP_craftingWeapons
	XP_craftingWeaponsMelee
	XP_craftingWeaponsRanged
	XP_craftingWeaponsMunition
	XP_industrialist
	XP_craftingScout
	XP_craftingCreature
	XP_craftingTissue
	XP_craftingCamp
	XP_craftingTrapping
	XP_craftingSpice
	XP_jediGeneral
	XP_shipwright
	XP_reverseEngineering
}

// this enum is also defined in the shared draft_schematic_object_template.tdf file
enum ArmorRating
{
	AR_armorNone
	AR_armorLight
	AR_armorMedium
	AR_armorHeavy
}

enum ArmorLevel
{
	AL_basic
	AL_standard
	AL_advanced
}

enum ArmorCategory
{
	AC_reconnaissance
	AC_battle
	AC_assault
	AC_psg             // personal shield generator
}

// this enum is also defined in the shared draft_schematic_object_template.tdf file
enum DamageType
{
	DT_kinetic                    = 0x00000001
	DT_energy                     = 0x00000002
	DT_blast                      = 0x00000004
	DT_stun                       = 0x00000008
	DT_restraint                  = 0x00000010
	DT_elemental_heat             = 0x00000020
	DT_elemental_cold             = 0x00000040
	DT_elemental_acid             = 0x00000080
	DT_elemental_electrical       = 0x00000100
	DT_environmental_heat         = 0x00000200
	DT_environmental_cold         = 0x00000400
	DT_environmental_acid         = 0x00000800
	DT_environmental_electrical   = 0x00001000
}

struct AttribMod
{
	id ATTS
	enumAttributes target      server        //which attribute is affected
	int            value       server        //max strength of the modifier
	float          time        server        //how long it takes for the modifier to reach full strength (in secs)
	float          timeAtValue server        //how long the modifier remains at full strength (in secs)
	float          decay       server        //how long it takes for the modifier to go from full strength to 0 (in secs)
}

struct MentalStateMod
{
	id MESM
	enumMentalStates target    server       //which mental state is affected
	float          value       server       //max strength of the modifier
	float          time        server       //how long it takes for the modifier to reach full strength (in secs)
	float          timeAtValue server       //how long the modifier remains at full strength (in secs)
	float          decay       server       //how long it takes for the modifier to go from full strength to 0 (in secs)
}

struct Contents
{
	id CONT
	string                              slotName              //slot name, as defined in the object's slotDescriptorFilename
	bool                                equipObject           //flag to put the contents in the slot, as opposed to adding it to the container in the slot
	templateobject_template             content               //the object to add
}

struct Xp
{
	id EXPS
	enumXpTypes       type           //type of experience earned
	int               level          //difficulty level, 0 for leveless xp types
	int               value          //amount of experience earned
}


                          filename                 sharedTemplate         //template the client should associate with this template
list                      string                   scripts                //scripts attached to the object
                          objvar                   objvars                //default objvars added to the object
                          int                      volume                 //how much room does the object take up
list                      enumVisibleFlags         visibleFlags           //who can see this object
list                      enumDeleteFlags          deleteFlags            //who can delete this object
list                      enumMoveFlags            moveFlags              //who can move this object
                          bool                     invulnerable           //can this object not be destroyed/killed
                          float                    complexity             //how hard this item is to craft (?)
                          int                      tintIndex              //index into client tint palette
list enumListUpdateRanges float                    updateRanges           //distances for network updates
list                      structContents           contents               //what's in this object
list                      structXp                 xpPoints               //experience points for interacting with this object
								  bool                     persistByDefault       //flag to automatically persist this object on creation
								  bool                     persistContents        //flag that this container persists its contents

version 9

enum Attributes
{
	AT_health
	AT_constitution
	AT_action
	AT_stamina
	AT_mind
	AT_willpower
}

enum MentalStates
{
	MS_fear
	MS_anger
	MS_interest
	// MS_contempt
	// MS_disgust
	MS_distress
	// MS_joy
	// MS_shame
	// MS_surprise
}

enum UpdateRanges
{
	UR_near
	UR_normal
	UR_far
}

enum MoveFlags
{
	MF_gm
	MF_player
}

enum VisibleFlags
{
	VF_gm
	VF_player
}

enum DeleteFlags
{
	DF_gm
	DF_player
}

// crafting types also defined in base_class.java
enum CraftingType
{
	CT_weapon                          = 0x00000001
	CT_armor                           = 0x00000002
	CT_food                            = 0x00000004
	CT_clothing                        = 0x00000008
	CT_vehicle                         = 0x00000010
	CT_droid                           = 0x00000020
	CT_chemical                        = 0x00000040
	CT_plantBreeding                   = 0x00000080
	CT_animalBreeding                  = 0x00000100
	CT_furniture                       = 0x00000200
	CT_installation                    = 0x00000400
	CT_lightsaber                      = 0x00000800
	CT_genericItem                     = 0x00001000
	CT_genetics                        = 0x00002000
	CT_mandalorianTailor               = 0x00004000
	CT_mandalorianArmorsmith           = 0x00008000
	CT_mandalorianDroidEngineer        = 0x00010000
	CT_space                           = 0x00020000
	CT_reverseEngineering              = 0x00040000
	CT_misc                            = 0x00080000
	CT_spaceComponent                  = 0x00100000
	CT_mission                         = 0x80000000
	// the following items are combos to allow a draft schematic template to use them
	CT_weaponMission                   = 0x80000001
	CT_armorMission                    = 0x80000002
	CT_foodMission                     = 0x80000004
	CT_clothingMission                 = 0x80000008
	CT_vehicleMission                  = 0x80000010
	CT_droidMission                    = 0x80000020
	CT_chemicalMission                 = 0x80000040
	CT_plantBreedingMission            = 0x80000080
	CT_animalBreedingMission           = 0x80000100
	CT_furnitureMission                = 0x80000200
	CT_installationMission             = 0x80000400
	CT_lightsaberMission               = 0x80000800
	CT_genericItemMission              = 0x80001000
	CT_geneticsMission                 = 0x80002000
	CT_mandalorianTailorMission        = 0x80004000
	CT_mandalorianArmorsmithMission    = 0x80008000
	CT_mandalorianDroidEngineerMission = 0x80010000
	CT_spaceMission                    = 0x80020000
	CT_reverseEngineeringMission       = 0x80040000
	CT_miscMission                     = 0x80080000
	CT_spaceComponentMission           = 0x80100000
}

// NOTE: when you update this list, make sure to update the registerMe() function in ServerObjectTemplate.cpp
enum XpTypes
{
	XP_rangedCombat
	XP_meleeCombat
	XP_tamingNoTime
	XP_tamingShortTime
	XP_tamingMediumTime
	XP_tamingLargeTime
	XP_architect
	XP_botany
	XP_bountyHunter
	XP_chemist
	XP_dancing
	XP_facilityManagementSavings
	XP_facilityManagementWearAndTear
	XP_squadLeaderNoTime
	XP_squadLeaderSmallTime
	XP_squadLeaderMediumTime
	XP_squadLeaderLargeTime
	XP_hairdressing
	XP_holonetSlicingPopularity
	XP_holonetSlicingQuantity
	XP_investigation
	XP_medic
	XP_military
	XP_mining
	XP_miningSavings
	XP_musician
	XP_musicanPopularity
	XP_politics
	XP_slicing
	XP_smuggling
	XP_surveyingNoMinimum
	XP_surveyingLowMinimum
	XP_surveyingMediumMinimum
	XP_surveyingHighMinimum
	XP_survivalHealing
	XP_survivalTracking
	XP_vehicularControl
	XP_vehicularWearAndTear
	XP_resourceHarvestingOrganic
	XP_resourceHarvestingInorganic
	XP_crafting
	XP_craftingClothing
	XP_craftingClothingArmor
	XP_craftingDroid
	XP_craftingFood
	XP_craftingMedicine
	XP_craftingStructure
	XP_craftingWeapons
	XP_craftingWeaponsMelee
	XP_craftingWeaponsRanged
	XP_craftingWeaponsMunition
	XP_industrialist
	XP_craftingScout
	XP_craftingCreature
	XP_craftingTissue
	XP_craftingCamp
	XP_craftingTrapping
	XP_craftingSpice
	XP_jediGeneral
	XP_shipwright
	XP_reverseEngineering
}

// this enum is also defined in the shared draft_schematic_object_template.tdf file
enum ArmorRating
{
	AR_armorNone
	AR_armorLight
	AR_armorMedium
	AR_armorHeavy
}

enum ArmorLevel
{
	AL_basic
	AL_standard
	AL_advanced
}

enum ArmorCategory
{
	AC_reconnaissance
	AC_battle
	AC_assault
	AC_psg             // personal shield generator
}

// this enum is also defined in the shared draft_schematic_object_template.tdf file
enum DamageType
{
	DT_kinetic                    = 0x00000001
	DT_energy                     = 0x00000002
	DT_blast                      = 0x00000004
	DT_stun                       = 0x00000008
	DT_restraint                  = 0x00000010
	DT_elemental_heat             = 0x00000020
	DT_elemental_cold             = 0x00000040
	DT_elemental_acid             = 0x00000080
	DT_elemental_electrical       = 0x00000100
	DT_environmental_heat         = 0x00000200
	DT_environmental_cold         = 0x00000400
	DT_environmental_acid         = 0x00000800
	DT_environmental_electrical   = 0x00001000
}

struct AttribMod
{
	id ATTS
	enumAttributes target      server        //which attribute is affected
	int            value       server        //max strength of the modifier
	float          time        server        //how long it takes for the modifier to reach full strength (in secs)
	float          timeAtValue server        //how long the modifier remains at full strength (in secs)
	float          decay       server        //how long it takes for the modifier to go from full strength to 0 (in secs)
}

struct MentalStateMod
{
	id MESM
	enumMentalStates target    server       //which mental state is affected
	float          value       server       //max strength of the modifier
	float          time        server       //how long it takes for the modifier to reach full strength (in secs)
	float          timeAtValue server       //how long the modifier remains at full strength (in secs)
	float          decay       server       //how long it takes for the modifier to go from full strength to 0 (in secs)
}

struct Contents
{
	id CONT
	string                              slotName              //slot name, as defined in the object's slotDescriptorFilename
	bool                                equipObject           //flag to put the contents in the slot, as opposed to adding it to the container in the slot
	templateobject_template             content               //the object to add
}

struct Xp
{
	id EXPS
	enumXpTypes       type           //type of experience earned
	int               level          //difficulty level, 0 for leveless xp types
	int               value          //amount of experience earned
}


                          filename                 sharedTemplate         //template the client should associate with this template
list                      string                   scripts                //scripts attached to the object
                          objvar                   objvars                //default objvars added to the object
                          int                      volume                 //how much room does the object take up
list                      enumVisibleFlags         visibleFlags           //who can see this object
list                      enumDeleteFlags          deleteFlags            //who can delete this object
list                      enumMoveFlags            moveFlags              //who can move this object
                          bool                     invulnerable           //can this object not be destroyed/killed
                          float                    complexity             //how hard this item is to craft (?)
                          int                      tintIndex              //index into client tint palette
list enumListUpdateRanges float                    updateRanges           //distances for network updates
list                      structContents           contents               //what's in this object
list                      structXp                 xpPoints               //experience points for interacting with this object
								  bool                     persistByDefault       //flag to automatically persist this object on creation
								  bool                     persistContents        //flag that this container persists its contents

version 10

enum Attributes
{
	AT_health
	AT_constitution
	AT_action
	AT_stamina
	AT_mind
	AT_willpower
}

enum MentalStates
{
	MS_fear
	MS_anger
	MS_interest
	// MS_contempt
	// MS_disgust
	MS_distress
	// MS_joy
	// MS_shame
	// MS_surprise
}

enum UpdateRanges
{
	UR_near
	UR_normal
	UR_far
}

enum MoveFlags
{
	MF_gm
	MF_player
}

enum VisibleFlags
{
	VF_gm
	VF_player
}

enum DeleteFlags
{
	DF_gm
	DF_player
}

// crafting types also defined in base_class.java
enum CraftingType
{
	CT_weapon                          = 0x00000001
	CT_armor                           = 0x00000002
	CT_food                            = 0x00000004
	CT_clothing                        = 0x00000008
	CT_vehicle                         = 0x00000010
	CT_droid                           = 0x00000020
	CT_chemical                        = 0x00000040
	CT_plantBreeding                   = 0x00000080
	CT_animalBreeding                  = 0x00000100
	CT_furniture                       = 0x00000200
	CT_installation                    = 0x00000400
	CT_lightsaber                      = 0x00000800
	CT_genericItem                     = 0x00001000
	CT_genetics                        = 0x00002000
	CT_mandalorianTailor               = 0x00004000
	CT_mandalorianArmorsmith           = 0x00008000
	CT_mandalorianDroidEngineer        = 0x00010000
	CT_space                           = 0x00020000
	CT_reverseEngineering              = 0x00040000
	CT_misc                            = 0x00080000
	CT_spaceComponent                  = 0x00100000
	CT_mission                         = 0x80000000
	// the following items are combos to allow a draft schematic template to use them
	CT_weaponMission                   = 0x80000001
	CT_armorMission                    = 0x80000002
	CT_foodMission                     = 0x80000004
	CT_clothingMission                 = 0x80000008
	CT_vehicleMission                  = 0x80000010
	CT_droidMission                    = 0x80000020
	CT_chemicalMission                 = 0x80000040
	CT_plantBreedingMission            = 0x80000080
	CT_animalBreedingMission           = 0x80000100
	CT_furnitureMission                = 0x80000200
	CT_installationMission             = 0x80000400
	CT_lightsaberMission               = 0x80000800
	CT_genericItemMission              = 0x80001000
	CT_geneticsMission                 = 0x80002000
	CT_mandalorianTailorMission        = 0x80004000
	CT_mandalorianArmorsmithMission    = 0x80008000
	CT_mandalorianDroidEngineerMission = 0x80010000
	CT_spaceMission                    = 0x80020000
	CT_reverseEngineeringMission       = 0x80040000
	CT_miscMission                     = 0x80080000
	CT_spaceComponentMission           = 0x80100000
}

// NOTE: when you update this list, make sure to update the registerMe() function in ServerObjectTemplate.cpp
enum XpTypes
{
	XP_rangedCombat
	XP_meleeCombat
	XP_tamingNoTime
	XP_tamingShortTime
	XP_tamingMediumTime
	XP_tamingLargeTime
	XP_architect
	XP_botany
	XP_bountyHunter
	XP_chemist
	XP_dancing
	XP_facilityManagementSavings
	XP_facilityManagementWearAndTear
	XP_squadLeaderNoTime
	XP_squadLeaderSmallTime
	XP_squadLeaderMediumTime
	XP_squadLeaderLargeTime
	XP_hairdressing
	XP_holonetSlicingPopularity
	XP_holonetSlicingQuantity
	XP_investigation
	XP_medic
	XP_military
	XP_mining
	XP_miningSavings
	XP_musician
	XP_musicanPopularity
	XP_politics
	XP_slicing
	XP_smuggling
	XP_surveyingNoMinimum
	XP_surveyingLowMinimum
	XP_surveyingMediumMinimum
	XP_surveyingHighMinimum
	XP_survivalHealing
	XP_survivalTracking
	XP_vehicularControl
	XP_vehicularWearAndTear
	XP_resourceHarvestingOrganic
	XP_resourceHarvestingInorganic
	XP_crafting
	XP_craftingClothing
	XP_craftingClothingArmor
	XP_craftingDroid
	XP_craftingFood
	XP_craftingMedicine
	XP_craftingStructure
	XP_craftingWeapons
	XP_craftingWeaponsMelee
	XP_craftingWeaponsRanged
	XP_craftingWeaponsMunition
	XP_industrialist
	XP_craftingScout
	XP_craftingCreature
	XP_craftingTissue
	XP_craftingCamp
	XP_craftingTrapping
	XP_craftingSpice
	XP_jediGeneral
	XP_shipwright
	XP_reverseEngineering
}

// this enum is also defined in the shared draft_schematic_object_template.tdf file
enum ArmorRating
{
	AR_armorNone
	AR_armorLight
	AR_armorMedium
	AR_armorHeavy
}

enum ArmorLevel
{
	AL_basic
	AL_standard
	AL_advanced
}

enum ArmorCategory
{
	AC_reconnaissance
	AC_battle
	AC_assault
	AC_psg             // personal shield generator
}

// this enum is also defined in the shared draft_schematic_object_template.tdf file
enum DamageType
{
	DT_none                       = 0x00000000
	DT_kinetic                    = 0x00000001
	DT_energy                     = 0x00000002
	DT_blast                      = 0x00000004
	DT_stun                       = 0x00000008
	DT_restraint                  = 0x00000010
	DT_elemental_heat             = 0x00000020
	DT_elemental_cold             = 0x00000040
	DT_elemental_acid             = 0x00000080
	DT_elemental_electrical       = 0x00000100
	DT_environmental_heat         = 0x00000200
	DT_environmental_cold         = 0x00000400
	DT_environmental_acid         = 0x00000800
	DT_environmental_electrical   = 0x00001000
}

struct AttribMod
{
	id ATTS
	enumAttributes target      server        //which attribute is affected
	int            value       server        //max strength of the modifier
	float          time        server        //how long it takes for the modifier to reach full strength (in secs)
	float          timeAtValue server        //how long the modifier remains at full strength (in secs)
	float          decay       server        //how long it takes for the modifier to go from full strength to 0 (in secs)
}

struct MentalStateMod
{
	id MESM
	enumMentalStates target    server       //which mental state is affected
	float          value       server       //max strength of the modifier
	float          time        server       //how long it takes for the modifier to reach full strength (in secs)
	float          timeAtValue server       //how long the modifier remains at full strength (in secs)
	float          decay       server       //how long it takes for the modifier to go from full strength to 0 (in secs)
}

struct Contents
{
	id CONT
	string                              slotName              //slot name, as defined in the object's slotDescriptorFilename
	bool                                equipObject           //flag to put the contents in the slot, as opposed to adding it to the container in the slot
	templateobject_template             content               //the object to add
}

struct Xp
{
	id EXPS
	enumXpTypes       type           //type of experience earned
	int               level          //difficulty level, 0 for leveless xp types
	int               value          //amount of experience earned
}


                          filename                 sharedTemplate         //template the client should associate with this template
list                      string                   scripts                //scripts attached to the object
                          objvar                   objvars                //default objvars added to the object
                          int                      volume                 //how much room does the object take up
list                      enumVisibleFlags         visibleFlags           //who can see this object
list                      enumDeleteFlags          deleteFlags            //who can delete this object
list                      enumMoveFlags            moveFlags              //who can move this object
                          bool                     invulnerable           //can this object not be destroyed/killed
                          float                    complexity             //how hard this item is to craft (?)
                          int                      tintIndex              //index into client tint palette
list enumListUpdateRanges float                    updateRanges           //distances for network updates
list                      structContents           contents               //what's in this object
list                      structXp                 xpPoints               //experience points for interacting with this object
								  bool                     persistByDefault       //flag to automatically persist this object on creation
								  bool                     persistContents        //flag that this container persists its contents
version 11

enum Attributes
{
	AT_health
	AT_constitution
	AT_action
	AT_stamina
	AT_mind
	AT_willpower
}

enum MentalStates
{
	MS_fear
	MS_anger
	MS_interest
	// MS_contempt
	// MS_disgust
	MS_distress
	// MS_joy
	// MS_shame
	// MS_surprise
}

enum UpdateRanges
{
	UR_near
	UR_normal
	UR_far
}

enum MoveFlags
{
	MF_gm
	MF_player
}

enum VisibleFlags
{
	VF_gm
	VF_player
}

enum DeleteFlags
{
	DF_gm
	DF_player
}

// crafting types also defined in base_class.java
enum CraftingType
{
	CT_weapon                          = 0x00000001
	CT_armor                           = 0x00000002
	CT_food                            = 0x00000004
	CT_clothing                        = 0x00000008
	CT_vehicle                         = 0x00000010
	CT_droid                           = 0x00000020
	CT_chemical                        = 0x00000040
	CT_plantBreeding                   = 0x00000080
	CT_animalBreeding                  = 0x00000100
	CT_furniture                       = 0x00000200
	CT_installation                    = 0x00000400
	CT_lightsaber                      = 0x00000800
	CT_genericItem                     = 0x00001000
	CT_genetics                        = 0x00002000
	CT_mandalorianTailor               = 0x00004000
	CT_mandalorianArmorsmith           = 0x00008000
	CT_mandalorianDroidEngineer        = 0x00010000
	CT_space                           = 0x00020000
	CT_reverseEngineering              = 0x00040000
	CT_misc                            = 0x00080000
	CT_spaceComponent                  = 0x00100000
	CT_mission                         = 0x80000000
	// the following items are combos to allow a draft schematic template to use them
	CT_weaponMission                   = 0x80000001
	CT_armorMission                    = 0x80000002
	CT_foodMission                     = 0x80000004
	CT_clothingMission                 = 0x80000008
	CT_vehicleMission                  = 0x80000010
	CT_droidMission                    = 0x80000020
	CT_chemicalMission                 = 0x80000040
	CT_plantBreedingMission            = 0x80000080
	CT_animalBreedingMission           = 0x80000100
	CT_furnitureMission                = 0x80000200
	CT_installationMission             = 0x80000400
	CT_lightsaberMission               = 0x80000800
	CT_genericItemMission              = 0x80001000
	CT_geneticsMission                 = 0x80002000
	CT_mandalorianTailorMission        = 0x80004000
	CT_mandalorianArmorsmithMission    = 0x80008000
	CT_mandalorianDroidEngineerMission = 0x80010000
	CT_spaceMission                    = 0x80020000
	CT_reverseEngineeringMission       = 0x80040000
	CT_miscMission                     = 0x80080000
	CT_spaceComponentMission           = 0x80100000
}

// NOTE: when you update this list, make sure to update the registerMe() function in ServerObjectTemplate.cpp
enum XpTypes
{
	XP_rangedCombat
	XP_meleeCombat
	XP_tamingNoTime
	XP_tamingShortTime
	XP_tamingMediumTime
	XP_tamingLargeTime
	XP_architect
	XP_botany
	XP_bountyHunter
	XP_chemist
	XP_dancing
	XP_facilityManagementSavings
	XP_facilityManagementWearAndTear
	XP_squadLeaderNoTime
	XP_squadLeaderSmallTime
	XP_squadLeaderMediumTime
	XP_squadLeaderLargeTime
	XP_hairdressing
	XP_holonetSlicingPopularity
	XP_holonetSlicingQuantity
	XP_investigation
	XP_medic
	XP_military
	XP_mining
	XP_miningSavings
	XP_musician
	XP_musicanPopularity
	XP_politics
	XP_slicing
	XP_smuggling
	XP_surveyingNoMinimum
	XP_surveyingLowMinimum
	XP_surveyingMediumMinimum
	XP_surveyingHighMinimum
	XP_survivalHealing
	XP_survivalTracking
	XP_vehicularControl
	XP_vehicularWearAndTear
	XP_resourceHarvestingOrganic
	XP_resourceHarvestingInorganic
	XP_crafting
	XP_craftingClothing
	XP_craftingClothingArmor
	XP_craftingDroid
	XP_craftingFood
	XP_craftingMedicine
	XP_craftingStructure
	XP_craftingWeapons
	XP_craftingWeaponsMelee
	XP_craftingWeaponsRanged
	XP_craftingWeaponsMunition
	XP_industrialist
	XP_craftingScout
	XP_craftingCreature
	XP_craftingTissue
	XP_craftingCamp
	XP_craftingTrapping
	XP_craftingSpice
	XP_jediGeneral
	XP_shipwright
	XP_reverseEngineering
}

// this enum is also defined in the shared draft_schematic_object_template.tdf file
enum ArmorRating
{
	AR_armorNone
	AR_armorLight
	AR_armorMedium
	AR_armorHeavy
}

enum ArmorLevel
{
	AL_basic
	AL_standard
	AL_advanced
}

enum ArmorCategory
{
	AC_reconnaissance
	AC_battle
	AC_assault
	AC_psg             // personal shield generator
}

// this enum is also defined in the shared draft_schematic_object_template.tdf file
enum DamageType
{
	DT_none                       = 0x00000000
	DT_kinetic                    = 0x00000001
	DT_energy                     = 0x00000002
	DT_blast                      = 0x00000004
	DT_stun                       = 0x00000008
	DT_restraint                  = 0x00000010
	DT_elemental_heat             = 0x00000020
	DT_elemental_cold             = 0x00000040
	DT_elemental_acid             = 0x00000080
	DT_elemental_electrical       = 0x00000100
	DT_environmental_heat         = 0x00000200
	DT_environmental_cold         = 0x00000400
	DT_environmental_acid         = 0x00000800
	DT_environmental_electrical   = 0x00001000
}

struct AttribMod
{
	id ATTS
	enumAttributes target      server        //which attribute is affected
	int            value       server        //max strength of the modifier
	float          time        server        //how long it takes for the modifier to reach full strength (in secs)
	float          timeAtValue server        //how long the modifier remains at full strength (in secs)
	float          decay       server        //how long it takes for the modifier to go from full strength to 0 (in secs)
}

struct MentalStateMod
{
	id MESM
	enumMentalStates target    server       //which mental state is affected
	float          value       server       //max strength of the modifier
	float          time        server       //how long it takes for the modifier to reach full strength (in secs)
	float          timeAtValue server       //how long the modifier remains at full strength (in secs)
	float          decay       server       //how long it takes for the modifier to go from full strength to 0 (in secs)
}

struct Contents
{
	id CONT
	string                              slotName              //slot name, as defined in the object's slotDescriptorFilename
	bool                                equipObject           //flag to put the contents in the slot, as opposed to adding it to the container in the slot
	templateobject_template             content               //the object to add
}

struct Xp
{
	id EXPS
	enumXpTypes       type           //type of experience earned
	int               level          //difficulty level, 0 for leveless xp types
	int               value          //amount of experience earned
}


                          filename                 sharedTemplate         //template the client should associate with this template
list                      string                   scripts                //scripts attached to the object
                          objvar                   objvars                //default objvars added to the object
                          int                      volume                 //how much room does the object take up
list                      enumVisibleFlags         visibleFlags           //who can see this object
list                      enumDeleteFlags          deleteFlags            //who can delete this object
list                      enumMoveFlags            moveFlags              //who can move this object
                          bool                     invulnerable           //can this object not be destroyed/killed
                          float                    complexity             //how hard this item is to craft (?)
                          int                      tintIndex              //index into client tint palette
list enumListUpdateRanges float                    updateRanges           //distances for network updates
list                      structContents           contents               //what's in this object
list                      structXp                 xpPoints               //experience points for interacting with this object
								  bool                     persistByDefault       //flag to automatically persist this object on creation
								  bool                     persistContents        //flag that this container persists its contents



